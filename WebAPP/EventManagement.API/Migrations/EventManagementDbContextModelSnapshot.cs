// <auto-generated />
using System;
using EventManagement.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventManagement.API.Migrations
{
    [DbContext(typeof(EventManagementDbContext))]
    partial class EventManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("EventManagement.Core.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BannerImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentEventId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentEventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BannerImageUrl = "/sample-images/tech-conference.jpg",
                            Capacity = 1000,
                            Description = "Annual technology conference featuring the latest innovations and industry trends.",
                            EndDate = new DateTime(2025, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Title = "Tech Conference 2025",
                            Type = 1,
                            VenueName = "Tech Convention Center"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 1000,
                            Description = "Opening keynote discussing the future of artificial intelligence and its impact on society.",
                            EndDate = new DateTime(2025, 6, 1, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            ParentEventId = 1,
                            StartDate = new DateTime(2025, 6, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Title = "Keynote: Future of AI",
                            Type = 2,
                            VenueName = "Main Hall"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 50,
                            Description = "Hands-on workshop on developing applications with Blazor and .NET.",
                            EndDate = new DateTime(2025, 6, 2, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentEventId = 1,
                            StartDate = new DateTime(2025, 6, 2, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            Title = "Workshop: Building with Blazor",
                            Type = 2,
                            VenueName = "Workshop Room A"
                        },
                        new
                        {
                            Id = 4,
                            BannerImageUrl = "/sample-images/summer-concert.jpg",
                            Capacity = 500,
                            Description = "Annual summer concert featuring local bands and artists.",
                            EndDate = new DateTime(2025, 7, 15, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2025, 7, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Title = "Summer Concert",
                            Type = 0,
                            VenueName = "City Park Amphitheater"
                        });
                });

            modelBuilder.Entity("EventManagement.Core.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeakerBio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpeakerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("EventManagement.Core.Entities.Event", b =>
                {
                    b.HasOne("EventManagement.Core.Entities.Event", "ParentEvent")
                        .WithMany("SubEvents")
                        .HasForeignKey("ParentEventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentEvent");
                });

            modelBuilder.Entity("EventManagement.Core.Entities.Session", b =>
                {
                    b.HasOne("EventManagement.Core.Entities.Event", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventManagement.Core.Entities.Event", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("SubEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
